'use server';

/**
 * @fileOverview Suggests a relevant Telegram message when entering a geofence, generated by the on-device LLM.
 *
 * - suggestTelegramMessage - A function that suggests a Telegram message.
 * - SuggestTelegramMessageInput - The input type for the suggestTelegramMessage function.
 * - SuggestTelegramMessageOutput - The return type for the suggestTelegramMessage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestTelegramMessageInputSchema = z.object({
  location: z.string().describe('The name of the location (e.g., Home, Work).'),
  recipientName: z.string().describe('The name of the intended recipient.'),
});
export type SuggestTelegramMessageInput = z.infer<typeof SuggestTelegramMessageInputSchema>;

const SuggestTelegramMessageOutputSchema = z.object({
  suggestedMessage: z.string().describe('The suggested Telegram message.'),
});
export type SuggestTelegramMessageOutput = z.infer<typeof SuggestTelegramMessageOutputSchema>;

export async function suggestTelegramMessage(input: SuggestTelegramMessageInput): Promise<SuggestTelegramMessageOutput> {
  return suggestTelegramMessageFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestTelegramMessagePrompt',
  input: {schema: SuggestTelegramMessageInputSchema},
  output: {schema: SuggestTelegramMessageOutputSchema},
  prompt: `You are a helpful assistant that suggests Telegram messages when a user enters a geofence.

  The user is entering the following location: {{{location}}}
  The intended recipient is: {{{recipientName}}}

  Suggest a short, relevant Telegram message to send to the recipient:
`,
});

const suggestTelegramMessageFlow = ai.defineFlow(
  {
    name: 'suggestTelegramMessageFlow',
    inputSchema: SuggestTelegramMessageInputSchema,
    outputSchema: SuggestTelegramMessageOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
